{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "db83d92a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mass</th>\n",
       "      <th>width</th>\n",
       "      <th>height</th>\n",
       "      <th>color_score</th>\n",
       "      <th>fruit_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>192</td>\n",
       "      <td>8.4</td>\n",
       "      <td>7.3</td>\n",
       "      <td>0.55</td>\n",
       "      <td>apple</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>180</td>\n",
       "      <td>8.0</td>\n",
       "      <td>6.8</td>\n",
       "      <td>0.59</td>\n",
       "      <td>apple</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>176</td>\n",
       "      <td>7.4</td>\n",
       "      <td>7.2</td>\n",
       "      <td>0.60</td>\n",
       "      <td>apple</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>86</td>\n",
       "      <td>6.2</td>\n",
       "      <td>4.7</td>\n",
       "      <td>0.80</td>\n",
       "      <td>mandarin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>84</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.6</td>\n",
       "      <td>0.79</td>\n",
       "      <td>mandarin</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   mass  width  height  color_score fruit_name\n",
       "0   192    8.4     7.3         0.55      apple\n",
       "1   180    8.0     6.8         0.59      apple\n",
       "2   176    7.4     7.2         0.60      apple\n",
       "3    86    6.2     4.7         0.80   mandarin\n",
       "4    84    6.0     4.6         0.79   mandarin"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sn\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "data = pd.read_csv('fruit_data.csv')\n",
    "dataset = data[[\"mass\" , \"width\", \"height\" , \"color_score\"]]\n",
    "df = pd.DataFrame(dataset)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "500b2d25",
   "metadata": {},
   "source": [
    "#### با استفاده ازچند کتابخانه از جمله پانداس توانستیم دیتاست را بخوانیم و در یک متغیر ذخیره کنیم"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71be5e66",
   "metadata": {},
   "source": [
    "# تمرین 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "06a2b2ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "mass           163.118644\n",
       "width            7.105085\n",
       "height           7.693220\n",
       "color_score      0.762881\n",
       "dtype: float64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# تمرین شماره 1\n",
    "avg_clmns = dataset.mean(axis = 0)\n",
    "avg_clmns.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d147d32",
   "metadata": {},
   "source": [
    "#### با استفاده از تابع مخصوص محاسبه میانگین ، میانگین را برای هر ستون محاسبه کردیم\n",
    "#### axis = 0 عبارت روبه رو برای عملیات روی ستونها ضروری بوده است\n",
    "میانگین از لحاظ ریاضی مفهوم ساده ای دارد و حاصلِ جمع تمام مقادیر تقسیم بر تعدادشان میباشد  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0979358",
   "metadata": {},
   "source": [
    "# تمرین 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9708343a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                    mass      width     height  color_score\n",
      "mass         3027.071888  39.449386  45.645646    -0.337417\n",
      "width          39.449386   0.667387   0.441242    -0.004808\n",
      "height         45.645646   0.441242   1.852367    -0.025842\n",
      "color_score    -0.337417  -0.004808  -0.025842     0.005907\n"
     ]
    }
   ],
   "source": [
    "# تمرین شماره 2\n",
    "covMx = pd.DataFrame.cov(df)\n",
    "print(covMx)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "774e52de",
   "metadata": {},
   "source": [
    "### با استفاده از فانکشن مخصوص محاسبه کواریانس که کتابخانه پانداس مهیا کرده است ، به سادگی توانستیم  کواریانس را برای همه ستون ها دو به دو به دست آوریم و خروجی یک ماتریس است"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "d4c4f72f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWgAAAD7CAYAAABHYA6MAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAABREklEQVR4nO3dd3gURR/A8e+PJHQI0oQUCF1AeoBIkSqEGgSliEhRkY6iIM1XQCkqxYY0pQrSkS4JVRACCSGUQIBITQi9KT3JvH/c5riQdkcKZ5gPzz53NzuzOzNZ5uZmZ3dFKYWmaZpmfzI96wxomqZpCdMNtKZpmp3SDbSmaZqd0g20pmmandINtKZpmp3SDbSmaZqd0g20pmlaIkQkq4jsE5GDIhIiIqON8Lwi4iciJ43XFyzSDBORMBE5LiJNLcKrichhY933IiLJ7j895kE/unpKT7Y25HSr96yzoNmh6JiYZ50FuxH1MCLZhis5trQ5TvmLJ7o/oxHNoZT6V0ScgF3AQKAtcF0pNUFEhgIvKKU+FZFywG9ADcAF2AyUVkpFi8g+I60/sAH4Xim1Mam86R60pmkZT0y09UsSlMm/xkcnY1GADzDPCJ8HtDHe+wCLlVIPlFKngTCghogUBnIrpfYoU694vkWaROkGWtO0jEfFWL2ISE8RCbRYelpuSkQcRCQYuAz4KaX2Ai8qpSIBjNeCRnRX4LxF8nAjzNV4/2R4khyfsviapmn2y4YhI6XUTGBmEuujgcoikgdYJSIvJ7G5hIZLVBLhSdINtKZpGY5SqT+mr5S6KSLbAW/gkogUVkpFGsMXl41o4YC7RTI34IIR7pZAeJL0EIemaRlPTIz1SxJEpIDRc0ZEsgGNgVBgDdDViNYVWG28XwN0FJEsIlIMKAXsM4ZB/hERL+PE4zsWaRKle9CapmU80Y9Sa0uFgXki4oCpQ7tUKbVORPYAS0XkXeAc8CaAUipERJYCR4EooK8xRALQG5gLZAM2GkuS9DS7dKan2WkJ0dPsHkuNaXYPzwRa3eZk9vBM8f7Siu5Ba5qW8WSQLzzdQGualuGkxUnCZ0E30JqmZTy6B61pmmanUu8k4TOlG2hN0zIePcShaZpmp/QQh6Zpmp3SPWhN0zQ7pXvQmqZp9unxxXv/bbqB1jQt44mOetY5SBVW3yxJRN4UkVzG+5EislJEqqZd1jRN056SDfeDtme23M3uM6XUPyJSB2iK6SkC09ImW5qmaSmQSk9UedZsaaBjS9ICmKaUWg1kTv0saZqmpVAG6UHbMgYdISIzMN0P9SsRyYK+n7SmafYog8zisKWBbQ9sAryVUjeBvMDgtMiUpmlaimSQHrQtDXRhYL1S6qSI1Md0g+p9aZGpWA8ePKTjewNp27UPPp0/4MefFwBw6/Y/vDdwOM07vMt7A4dz6/Y/AOzeF0T7Hv15vUtv2vfoz979wQDcuXOXdl37mpc6zTsw4dvpCe5z1vwlNGvfg5Yd3+OvvfttTp9WsmTJwq6dawnYt4kDQZv57LNBAFSoUJYd239nf6AfK1fMJleunIluI1OmTOz138iqlXPirfvoww94cP88+fK9AICTkxMzZ05if6AfAfs28eqrXvHSrFg+m6D9m1OphLZ5siwjR37Eqb8D2Lf3D/bt/QPvpg0STOfsnJvfFk3n0MFtHAzeSs2acc9zP1kPRYu6cfPGSfN2f/xhnDmuk5MTP02dwJHDOzh0cBtt2jRLo9LGN2XyGEKP7iJovx9VKif8iLyZMyayP9CPoP1+LFk8kxw5sgPQqlUTgvb7ERjgi/+eDdSuVR2A0qVLEBjga16uXw1lQP/34mxz0EcfEPUwwlw/efO+wGbfZdy8foLvvv3SHC9nzhxxtnXxwmEmTRydFlWRsKgo6xc7ZssQxwrAU0RKAr9gerTLIqB5WmQMIHNmJ2Z/P4Hs2bPxKCqKd3p/Ql0vTzbv2I2XZ2Xe69Kenxcs5ZdflzKoz7u8kCc3P341ioIF8nHy1Bk++GgkW1f/So4c2Vkxb6p5u+179Kdx/drx9vf36bNs3LKD1b9O5/LV67w3cBjrF/9sdfq09ODBA5p6d+DOnbs4OjqybetKNm3axpTJXzB02Jfs3OlP164dGDSoF6NHT0xwG/37vUvo8TByP9GIu7kVplGjupw99/ihw+/2eAuAap6vUaBAPtasnk+t2i2JfcCDj483/965k0alTV5CZfnhh5+Z8u2MJNNNmjQKX7/tdHqrF05OTmTPns28LqF6ADh16iw1anrH29bQof25fOUaL1eoh4iQN2+elBXKSs28G1KqZDFeKleHmjWqMvXH8dSq0ypevI8/GcU///wLwMSvP6dvn+58/c1Utm7dxdq1voDpC/63RdN5uUI9Tpz4G8/qTQDTF+C5M/v5ffXjh364ubnQuNGrnD37uH7u37/P56O+pnz5lyhfvow5/N9/75i3BbDXfyO//74hdSsiCRllHrQtPegYpVQU0Bb4Vin1EaZedZoREfN/oKioKKKiohARtu3cg0+zxgD4NGvM1j/3AFC2dEkKFsgHQMliRXnw8CEPHz6Ms82z5yO4duMm1SrF73Vs3elPs0b1yJw5M24uhSji5sLhYyesTp/W7ty5C4CTkyNOTo4opShdujg7d/oDsGXLn7yeSC/O1bUQzZo1ZM6c3+Kt++brzxk2fCyWT9cpW7YU27btAuDKlWvcunWbatUqAZAjR3YGDnyf8eO/T9XyWSupsiQlV66c1K1TkzlzFgPw6NEjbt26bV6fUD0kpWvXDnz99Y8AKKW4du2GTfl5Wq1aNWXBwuUA7N0XhHMeZwoVKhgvXmzjDJA1W1ZzuWKPI4Ac2bMnWN5GDetw6tRZzp2LMIdNmjiKoU/Uz9279/hrdwD37z9INL8lSxajYIH87Ny114ZSplAqPZPwWbOlgX4kIp0wPexwnRHmlPpZiis6Opp2XfvyastOvFK9ChXLv8S1GzcpkD8vAAXy5+X6zVvx0vlt30XZ0iXInDnuRJMNftvxbvQqpuc2xnX5yjUKvVjA/PnFgvm5fOWq1enTWqZMmdi39w/CzwezZctOAgKCCQk5TquWpp5Ku7YtcXNzSTDtxG9GMWz4OGKeOCBbtniNCxcucvjwsTjhhw4fpVXLJjg4OODh4U6VKhVwczN9H4/6fDDffjuLe/fupUEpk5dYWXr17kpggC8zZkwkTx7neOmKFSvClSvXmTVrMnv9NzJt2tfmDkBi9QDg4eHOXv+N+Pkto3btGoBpqARMdeG/ZwOLFk6jYMH8qV3UBLm6FCL8/OMHQkeER+LqUijBuD/PmkzE+WBeKlOSH6fONof7+Hhz5PAO1qyex/vvfxwvXfv2Pixe8rv5c8uWrxEREcmhQ0dtzm/HDj4sW7bG5nQp8hyOQXcHXgHGKqVOG0+s/TVtsvWYg4MDK+ZNZcuqBRw+eoKTp84kmybs1Fkm/zSb/w3uH2/dxi07aN64foLpFPF7EkLchjip9GktJiaGGjW9KV6iBp7VK1OuXBk++OATevXqyp7d68mZKwcPH8a/D27zZo24cuUaBw4cjhOeLVtWPv20P6PHTIqXZu7cJUREXGTP7vVM/GYU/v77iY6KpmLFcpQoUZQ1a/5Is3ImJbGyzJy5gLJl61C9RlMuXrzMV199Fi+to6MjVaq8zMyZ86np1Yy7d+4yeHDfJOshMvIyJUvVpKZXM4YMGcO8eT+QK1dOHB0dcHdzYfeeALxeac7evUFMmDAyzcptKaHOQWK9/vfeH4R70aocCz1J+zdbm8NXr/6DlyvUo90b7zJ6VNxz/U5OTrRq2YTlK0z9sGzZsjJ86ABGJTJ0lpwnG/t08bz1oJVSR5VSA5RSvxmfTyulJiQWX0R6ikigiAT+PN+2n6IJyZ0rJ9WrVmSXfyD5XsjDlavXAbhy9Tp5LXpLFy9fYeDwLxj32ScUeaI3GXryFNHRMZR/qVSC+3ixQH4uXrpi/nzp8lUKGEMm1qRPL7du3ebPP/fQtEl9jp/4mxYtO/NKrRYsXbKaU6fOxov/Si1PWrR4jePHd7Ng/lTq16/NnDnfUby4Bx4e7gQEbOL48d24uRbG338jL75YgOjoaAYPGU2Nmt688ea7ODvn5mTYabxqVqNKlYocP76brVtWUqpUMXx9l6Zb2RMry+XLV4mJiUEpxezZi6juWTle2oiISMIjIgkICAZg5aoNVKn8cpL18PDhQ65fvwnAgQOHOXXqLKVKFefatRvcuXOX1atNX1QrVq5L9GRdaujdq6v5hNuFyIu4uT8+tl3dCnMh8lKiaWNiYli2bA1tX28Rb93OXXspXryo+aQfgLd3Aw4cOMzly6ZfjyVKeODhUYSgQD/CTvjj5laYgL2beNHi12ZiKlYsh6OjI0FPfKGmuego6xc7Zsul3qVEZLmIHBWRU7FLYvGVUjOVUp5KKc/33un0VJm7fuMmt41xtPsPHuAfcIBiRd2pX8eL1RtNswdWb9xMg7qvAHD7n3/pM/hzPvygG1Urlo+3vY2bt9OsceJP1W5Qx4uNW3bw8OFDwi9c5Fz4BSqULW11+rSUP39e88/qrFmz0rBhXY4fDzN/gYgIQ4cNYNbP8X/UfPbZV5QoWYMyZWrR5Z2+bN/+F927DyQkJBT3IlUoU6YWZcrUIjwiEi+vZly6dIVs2bKaf/43alSXqOhoQkNPMnPWAooV96RMmVo0bNSWkydP06RJ+3Srh8TKYjkG69Pam5CQ4/HSXrp0hfDwSEqXKg5Agwa1OXbsZJL1kD9/XjJlMv03KVasCCVLFOP06XMArF+/mXr1XjG2VYdjx06mWbmnTZ+HZ/UmeFZvwpo1m+jS+Q0Aataoyu1bt7l48XK8NCVKeJjft2zxGsePh8ULr1L5ZTJndoozft6xQ5s4Pd4jR0JxcatEydJelCztRXh4JNVrNuWSRWcmMR07+LAkvXvPkGGGOGyZxTEH+ByYAjTANOSRpgOxV67dYMSXE4mOiUHFKJo2rEv92jWp/HJZPv5sHCvXbaLwiwWY/OUIAH5bsZbz4ReYPvc3ps819dpnfjuWfC/kAWDT1p38NHFMnH1s2+lPSOgJ+r3/DiWLF6Vpw7q07vwBjg4OjBjUBwcHB3PchNKnl0KFCvLLz1NwcHAgU6ZMLF+xlg0bt9Cvbw969eoKwO+/b2TevCUAFC78ItOnfY1Pm65Ptb+CBfOzbu2vxMTEcOHCRXr0GJhqZUkL48YNp1LF8iilOHs2nL79hgLx6+Gjjz5j7twfyJzZidOnz/F+z/jjr5bq1KnJ5//7mKioaKKjo+nffxg3btwEYMTIccye/R0TvxnF1avXkt1WatmwcQve3g05fuwv7t67x3vvDTKvW7t6Pj17DebixcvM+eVbcuXOiYhw6NBR+vYbBkDb15vz9ttv8OhRFPfv3eetzr3N6bNly0rjRq/Su8+nVucn7IQ/uXPnJHPmzPi09qZZi07mL6s32rWilU+XVCq5Dex86MJaYu0ZaxHZr5SqJiKHlVIVjLCdSqm6yaV9dPWUdTt5DuR0ezY9cM2+RWeQBiU1RD2MSHHH7976b61uc7K1+DD9z/hbyZYe9H0RyQScFJF+QAQQf26Ppmnas2bnQxfWsmUWx4dAdmAAUA14G9OUO03TNPuSQWZx2NKDVsACoCiP5z/PAiqmdqY0TdNSxM5nZ1jLlh70QkwnCtsBLY0l/vWlmqZpz1oqzeIQEXcR2SYix0QkREQGGuGjRCRCRIKNpblFmmEiEiYix0WkqUV4NRE5bKz7Xqy42s2WHvQVpVQ6Xw6kaZr2FFJv6CIK+FgpFWQ8UWq/iPgZ66YopeJcvSMi5YCOQHnABdgsIqWV6eYg04CegD+wAfAGNpIEWxroz0XkZ2ALYL7wXim10oZtaJqmpb1UaqCVUpFApPH+HxE5BrgmkcQHWKyUegCcFpEwoIaInAFyK6X2AIjIfKANqdhAdwdewjT+HFt6BegGWtM0+2Ll9GEwXfWMqWcba6ZSamYC8TyAKsBeoDbQT0TeAQIx9bJvYGq8/S2ShRthj4z3T4YnyZYGulLs/GdN0zS7ZkMP2miM4zXIlkQkJ6ZbLn+olLotItOALzB1Ur8AJgE9SPjiPZVEeJJsaaD9RaScUsr221lpmqalp1ScxSEiTpga54WxQ7pKqUsW62fx+A6f4YC7RXI34IIR7pZAeJJsmcVRBwg2zkweMs5GHrIhvaZpWvpIpXnQxkyLX4BjSqnJFuGW98J/HThivF8DdBSRLMYdP0sB+4yx7H9ExMvY5jvA6uSKYUsPOv4jJTRN0+yRDWPQyagNdAEOi0iwETYc6CQilTENU5wBPjDtVoWIyFLgKKYZIH3V48e79AbmAtkwnRxM8gQh2NBAK6Xi38dS0zTNHqXeLI5dJDx+nOjzu5RSY4GxCYQHAjbdk9aWHrSmadp/g51fwm0t3UBrmpbhqOiM8dBY3UBrmpbx6B60pmmancogtxvVDbSmaRlPTMZ4RohuoDVNy3j0EIemaZqd0g20pmmandKzODRN0+yUHoPWNE2zU3oWh6Zpmp3SPWjr5XSrlx67+U+IziAnLzTNnqkM8v9M96A1Tct4dA9a0zTNTulZHJqmaXZKD3FomqbZKT3EoWmaZqf0NDtN0zQ7pXvQmqZp9klF6ZOEmqZp9kn3oDVN0+yUHoPWNE2zU7oHrWmaZp+UbqA1TdPslG6gNU3T7JSexaFpmmandA9a0zTNPimVMRroTM86A5qmaakuRlm/JEFE3EVkm4gcE5EQERlohOcVET8ROWm8vmCRZpiIhInIcRFpahFeTUQOG+u+FxFJrhhWN9AiUlpEZomIr4hsjV2sTa9pmpZuUqmBBqKAj5VSZQEvoK+IlAOGAluUUqWALcZnjHUdgfKAN/CTiDgY25oG9ARKGYt3cju3ZYhjGTAdmAVkjBF4TdMypNSaZqeUigQijff/iMgxwBXwAeob0eYB24FPjfDFSqkHwGkRCQNqiMgZILdSag+AiMwH2gAbk9q/LQ10lFJqmg3xNU3Tno0o6xtoEemJqWcba6ZSamYC8TyAKsBe4EWj8UYpFSkiBY1oroC/RbJwI+yR8f7J8CQl20CLSF7j7VoR6QOsAh7ErldKXU9uG5qmaenJlh600RjHa5AtiUhOYAXwoVLqdhLDxwmtUEmEJ8maHvT+J3Yw+IkdFLdiG5qmaeknFafZiYgTpsZ5oVJqpRF8SUQKG73nwsBlIzwccLdI7gZcMMLdEghPUrInCZVSxZRSxYGyxnvzApRLLr2maVq6i7FhSYIx0+IX4JhSarLFqjVAV+N9V2C1RXhHEckiIsUwnQzcZwyH/CMiXsY237FIkyhbptnttjIs1WTJkoVdO9cSsG8TB4I289lngwCoUKEsO7b/zv5AP1aumE2uXDkT3UamTJnY67+RVSvnxFv30Ycf8OD+efLlM82QcXJyYubMSewP9CNg3yZefdUrXpoVy2cTtH9zKpUwaU2b1CfkyJ+EHt3FkMF9E4xT79VXCAzw5WDwVrZuXm4Od3bOzZLFMzlyeAeHD23Hq2Y1ABYtnEZggC+BAb6EnfAnMMAXgOqelc3h+wP98PF5fIK5QwcfDgRtJmi/H+vX/mqur0nfjDKnORqyk6uXj6ZVVVhVFwCe1Srx4N452rZtESc8U6ZMBOzbxOpV88xh7dq15GDwVh7eP0+1qhXN4Y0b1WWv/0YOBG1mr/9GGtSvHW8/q1bOIfjAFvPnDwf25NDBbQTt98P3jyUUKZLs8KJVpkweQ+jRXQTt96NK5ZcTjOPh4c7uXWs5FrKLRQun4eTkZFX6hOqkUqXy/LVzLYEBvvjv2UB1z8rmdZ8O6Ufo0V2EHPmTJq/VM4cndnxkzpyZRQunEXp0F7t3raVo0ccdyPVrf+Xq5aNx9p2aVIyyeklGbaAL0FBEgo2lOTABeE1ETgKvGZ9RSoUAS4GjwB9AX6VU7KSK3sDPQBjwN8mcIATrxqALYRrMziYiVXg81JEbyJ5c+pR48OABTb07cOfOXRwdHdm2dSWbNm1jyuQvGDrsS3bu9Kdr1w4MGtSL0aMnJriN/v3eJfR4GLmfaMTd3ArTqFFdzp57PG7/bo+3AKjm+RoFCuRjzer51Krd0jzp3cfHm3/v3Emj0saVKVMmvv9uLN7NOxEeHon/ng2sXefLsWMnzXGcnXPzww/jaNGyM+fPX6BAgXzmdVMmj2HTpm106NgTJycnsmfPBsBbnXub43zz1f+4dfs2AEdCQqnp1Yzo6GgKFSpIUKAf69b5mbY1aQwVKtXn2rUbTBg/gr59ujPmi8l8PHiUeVt9+3SnciINSHrURWy88eNG4Ou7Pd42BvR/j9DQk+TOlcscFhISypvt32fa1Alx4l69dp02r3cjMvIS5cuXYcO6hRQt5mle36ZNM/79N+5xEBx8hJpezbh37z4f9HyHCeNHxqnrp9HMuyGlShbjpXJ1qFmjKlN/HE+tOq3ixRs/bgTffj+LpUvXMPXHCfTo3okZM+cnmz6hOpkwbgRffDmZPzZto5l3QyaMH0Gj196kbNlStG/vQ8XKDXFxeZFNGxdTtnxdRCTR46NH907cuHGLl8rVoX371owfN8JcJ5MmTyd79my8/97bKaqjxCgbThImuR2ldpHw+DFAo0TSjAXGJhAeCNj0n8SaHnRTYCKmMZPJwCRjGQQMt2VnT+POnbsAODk54uTkiFKK0qWLs3On6UTpli1/8nqbZgmmdXUtRLNmDZkz57d46775+nOGDR8b54qjsmVLsW3bLgCuXLnGrVu3qVatEgA5cmRn4MD3GT/++1QtX2JqVK/C33+f4fTpczx69IilS1fTulXTOHE6dXyd33/fyPnzF8x5BsiVKyd169RktlHuR48ecevW7Xj7eOONVixeYvqVde/efaKNR9VnzZrFXC8igoiQI0d2Y9u5uHDhUrxtdezQhiVLfk+FksdnTV0A9Ovbg5Wr1nPZqIdYrq6Fad6sEbNnxz0OQkPDOHHi73jbCQ4OITLSVMaQkONkzZqVzJkzA6bj4KOBPRk3/rs4abbv2M29e/cB2LtvP26uhZ++wIZWrZqyYOFyY5tBOOdxplChgvHiNahfmxUr1gOwYMEyfFo3TTZ9YnWilCJXblODnds5FxeMemjdqilLl67m4cOHnDlznr//PkON6lWSPD5at2rCggXLAFixYj0NG9Qx72frtl3888+/Ka6jRKXSEMezZs0Y9DylVAOgm1KqgcXS2mLAPO0ymCkT+/b+Qfj5YLZs2UlAQDAhIcdp1bIJAO3atsTNzSXBtBO/GcWw4eOIeeIR7C1bvMaFCxc5fPhYnPBDh4/SqmUTHBwc8PBwp0qVCri5mf6jjfp8MN9+O4t79+6lQSnjc3EtxPnwx+cQwiMicXEpFCdOqVLFyZPHmS1+y9jrv5G3334DgOLFi3L16jV++XkKAfs2MWP6N+YedKy6dWpy6fIVwsJOm8NqVK/CweCtBAdtoU+/oURHRxMVFUXf/sMIDtrC+bNBlCtbytzwxypSxBUPD3e2bvsrtasBsK4uXFwK0cbHmxkzF8RLP3nSaIYO+zLecWCNtm1bEBx8hIcPHwIwZtQQJn87g7t3Ez8OunfrxB+bttm8rye5uhQi/PzjckeER+L6RLnz5XuBmzdvmb9cwyMicXEtlGz6xOpk0Cef89X4kZz+O4CvJ3zGiJHjAVP9xvsbuBZK8viw/LtFR0dz69Zt8/BHWlMx1i/2LNkGWkQGicggoGjse8sliXQ9RSRQRAKjo5/+mzImJoYaNb0pXqIGntUrU65cGT744BN69erKnt3ryZkrBw8fPoqXrnmzRly5co0DBw7HCc+WLSufftqf0WMmxUszd+4SIiIusmf3eiZ+Mwp///1ER0VTsWI5SpQoypo1fzx1OWyV0DSeJ+8v4OjoQLWqFWnl8w7NW7zFiGEfUqpUcRwdHKhSpQIzZsyneo2m3Llzl0+H9IuTtkOHNixZEvccxb6AA1Sq3BCvWs0ZOqQfWbJkwdHRkV4938GzRlPci1bl0OFjDP20f9xttfdhxcr1T9UAWsOaupg8aXSCX8Ytmjfm8uWrBD1xHFijXLnSjB87nN59PwVM47MlSnqwenXix8Fbb7XFs1olJk5K+SUD1pQ7qTiJrUuqTj7o+Q4fDx5FsRLV+XjwaGbNmJTktpI6PhJOk1BJ00AG6UFbM80udoCqDFAd01lKgFbAn4klspxbmCWre4r/LLdu3ebPP/fQtEl9pnw7gxYtOwNQqmQxmnnHHwp6pZYnLVq8RlPvBmTNkoXcuXMxZ853TJw4DQ8PdwICNgHg5loYf/+N1KnTikuXrjB4yGjzNrZvW8XJsNO8WteLKlUqcvz4bhwdHClYMB++vktp0qR9SouVqIjwSNwtfhm4uRY2/+w2x4mI5Nq169y9e4+7d++xc5c/FSuWY9euvYSHR7Iv4AAAK1euZ8jgxw20g4MDr7dpRg2vhIeGQkPDuHPnHi+XL2P+T3bq1FkAli9fG+8kXfv2PgwYMCLlhU6ENXVRrWpFFv76EwD58+elmXdDoqKiqFmjCq1aNqGZd0OyZjUdB/Pmfk/XbgOS3Kera2GWL/uF7j0GmsvuVbMaVatUIOyEP46OpuNgi98yGr32JgCNGtZl2NABNGzUztzjtlXvXl15913TsR0YGIyb++Nyu7oVNg85xLp69Tp58jjj4OBAdHS0qW6MIYbwiMgE07dr1yLROnmny5t8NOh/gOlvPXP6N4DpWIv3N7hwicqVygMJHx+xf7eIiEgcHBxwds7N9es3nqpebGXvPWNrWTPEMVopNRrID1RVSn2slPoYqEbceX2pLn/+vDg75wYga9asNGxYl+PHw8wnw0SEocMGMOvnX+Ol/eyzryhRsgZlytSiyzt92b79L7p3H0hISCjuRapQpkwtypSpRXhEJF5ezbh06QrZsmU1DwU0alSXqOhoQkNPMnPWAooV96RMmVo0bNSWkydPp2njDBAQGEzJksXw8HDHycmJ9u19WLvON06cNWs3Uad2TRwcHMiWLSs1alQhNPQkly5dITz8AqVLlwCgYcM6HDt2wpyucSNTPUZERJrDPDzccXAw3TKgSBFXSpcuzpmz54m4cJGyZUuRP7/peqXGjV8lNDTMnK506RK8kMeZPf6Bz7QuSpV5hZKlvShZ2osVK9fTb8Bw1qzZxIiRE/Ao7knJ0l50frsP27b9lWzj7OycmzWr5zNi5Hh273lcrhkz51PEoxolS3tRr0EbTpw8ZW6cK1cuz09TJ/B62+7mcwFPY9r0eXhWb4Jn9SasWbOJLp1Nw1Y1a1Tl9q3bXLx4OV6a7Tt2066dadZKly5vsmatqW7WrfNNMH1SdXIh8hL1Xn0FgIYN6nDSGAJbu86X9u19yJw5Mx4e7pQsWYx9AQeSPD7WrvOlSxdT/bRr14Jt29NmCCxBz1EPOlYRwLJb8BDwSNXcPKFQoYL88vMUHBwcyJQpE8tXrGXDxi3069uDXr1MUxB//30j8+YtAaBw4ReZPu1rfNp0TWqziSpYMD/r1v5KTEwMFy5cpEePgalWFltFR0cz8MORbFi/CIdMmZg7bwlHj56g5/tdAJg5awGhoWFs8t3GgaDNxMTEMHv2b4SEHAdg4EefMX/eD2TO7MTp0+d4973Ho1Ht2/uYTw7Gql27BkMG9+XRoyhiYmLoN2A4166ZejtffDmFbVtX8ujRI86di6DHux+Z03Xs4MPSZclO50zzungaPj7efDflSwoUyMua1fM5eDCE5i0707dPd0qW8GDE8A8ZMfxDAJo175Rkw/vV+M/ImTMHi3+bAcD58xG83rb7U+Ur1oaNW/D2bsjxY39x99493rP4G65dPZ+evQYTGXmJYcPHsujXnxgzagjBB0PMY8BJpU9Mr16DmTx5DI6Ojjy4f5/evYcAcPToCZYvX8vhg9uIio5mwMARxMTEEBl5KdHjY/acxcyb+z2hR3dx48ZN3nq7j3k/27eupEyZkuTMmZ0zpwLp+cHH+PrtSFF9WYqJSrVNPVNi7X1TRWQE0B7Tpd4KeB1YqpQal1za1BjiyCii02icVtMyiqiHEcnehjM5lxrUs7rNeXHbjhTvL61Y3YNWSo0VkY1AXSOou1LqQNpkS9M0LQWU3ba5NrHmQpXcxs1B8gJnjCV2XV59syRN0+xNRjlJaE0PehHQksc3TYLHV9bomyVpmmZ3VMxz0oNWSrU03u7CNK1up1IqNE1zpWmalgIx0RmjgbblZklzgMLADyLyt4gsj30+l6Zpmj3JKFcS2nKScKuI7MB0sUoDoBemG398l2RCTdO0dPbcDHHEEpEtQA5gD7ATqK6Uij9rXtM07RlLt0vK05gtQxyHMF2c8jJQEXhZRLIlnUTTNC39qRixerFntgxxfATmZ3N1xzQmXQjIkjZZ0zRNezr23vBay5Yhjn6YLlKpBpwFZmMa6tA0TbMrGWUWhy334siG6Yb9+5VSGeRKd03TMiL1vFxJGEsp9U1aZkTTNC212Pv0OWvZ0oPWNE37T4h53nrQmqZp/xXP3RCHpmnaf8VzN4tD0zTtv+J5nMWhaZr2n6DHoDVN0+yUHoPWNE2zUxnlXhy6gdY0LcPJKEMcttwsSdM07T8hJkasXpIjIrNF5LKIHLEIGyUiESISbCzNLdYNE5EwETkuIk0twquJyGFj3fcikuzOdQOtaVqGE6PE6sUKcwHvBMKnKKUqG8sGABEpB3QEyhtpfhIRByP+NKAnUMpYEtpmHLqB1jQtw1FKrF6S35b6E7D24dg+wGKl1AOl1GkgDKghIoWB3EqpPUopBcwH2iS3Md1Aa5qW4djSgxaRniISaLH0tHI3/UTkkDEE8oIR5gqct4gTboS5Gu+fDE+SbqA1TctwlC2LUjOVUp4Wy0wrdjENKAFUBiKBSUZ4Ql1ylUR4kvQsDk3TMpy0nsWhlLoU+15EZgHrjI/hgLtFVDfgghHulkB4knQPWtO0DCdaidXL0zDGlGO9DsTO8FgDdBSRLCJSDNPJwH1KqUjgHxHxMmZvvAOsTm4/ugetaVqGoxIcUXg6IvIbUB/ILyLhwOdAfRGpjGmY4gzwAYBSKkRElgJHgSigr1Iq2thUb0wzQrIBG40l6X2rdLjkJktW9wxyXU/KRcdkkDuJa1oaiXoYkeLWdfuLb1rd5tS/tMxur2rRPWhN0zKcmFTsQT9LuoHWNC3DSc0hjmdJN9CapmU4GWUgUTfQmqZlONG6B61pmmafdA9a0zTNTukxaE3TNDuVQZ4Za/2VhCKywJowTdO0Zy0GsXqxZ7b0oMtbfjDucVotdbOjaZqWctHJR/lPSLYHbTwd4B+goojcNpZ/gMtYcS25pmlaeosRsXqxZ8k20Eqp8UqpXMA3SqncxpJLKZVPKTUsHfKoaZpmE1tuN2rPrB7iUEoNExFXoKhlOuNpA5qmaXbjuZtmJyITMD1r6yiPh3gUoBtoTdPsSkaZxWHLScLXgTJKqQdplRlN07TUYO+zM6xlSwN9CnACdAOtaZpdi84Y7XPyDbSI/IBpKOMuECwiW7BopJVSA9Iue5qmabbLKGPQ1lyoEgjsx/Qoly+A3cbn2CVNZcqUib3+G1m1cg4AI0d+xKm/A9i39w/27f0D76YNEkzn7Jyb3xZN59DBbRwM3krNmlXjrP/oww94cP88+fKZHsZbtKgbN2+cNG/3xx/GmeM6OTnx09QJHDm8g0MHt9GmTbM0Km1cTZvUJ+TIn4Qe3cWQwX0TjedZrRIP7p2jbdsWccIzZcpEwL5NrF41zxzWrl1LDgZv5eH981SrWtEc3rhRXfb6b+RA0Gb2+m+kQf3a8fazauUcgg9sMX/+cGBPDh3cRtB+P3z/WEKRIsk+pDhVzJo5iQvhB+PkxVLu3Ln4fdVc9gf6cTB4K13faW9eF3bCnwNBmwkM8MV/zwZz+FfjR3Lk8A6C9vuxfNnPODvnBqC6Z2UCA3wJDPBlf6AfPj7eAOTMmcMcHhjgy8ULh5k0cXQalhqmTB5D6NFdBO33o0rllxOM4+Hhzu5dazkWsotFC6fh5OQEQKdOrxO034+g/X7s3LGaihXLmdMkVieVKpXnr51rzeHVPSvH2Ze7uws3r59g0EcfAJAtW1bW/D6fI4d3cDB4K+PGPp7kld7HynMzi0MpNS+5OGmpf793CT0eRu5cOc1hP/zwM1O+nZFkukmTRuHrt51Ob/XCycmJ7Nmzmde5uRWmUaO6nD0XHifNqVNnqVHTO962hg7tz+Ur13i5Qj1EhLx586SsUFbIlCkT3383Fu/mnQgPj8R/zwbWrvPl2LGT8eKNHzcCX9/t8bYxoP97hIaeJHeuXOawkJBQ3mz/PtOmTogT9+q167R5vRuRkZcoX74MG9YtpGgxT/P6Nm2a8e+/d+KkCQ4+Qk2vZty7d58Per7DhPEjeatz71QofdLmz1/KTz/NYc6c7xJc36d3N44dO0Gb17uRP39ejh75k0W/reLRo0cANH7tTa5duxEnzeYtfzJ85Hiio6MZP244Qz/tx7Dh4zgSEkpNr2ZER0dTqFBBggL9WLfOj3//vYNn9Sbm9Hv9N/L77xtIK828G1KqZDFeKleHmjWqMvXH8dSq0ypevPHjRvDt97NYunQNU3+cQI/unZgxcz5nTp+nYaM3uHnzFt5NGzD9p6/ipE+oTiaMG8EXX07mj03baObdkAnjR9DotTfN6ydNHMUfm7bFSTN5ynS279iNk5MTfpuW4N20AX9s2pbux0pGOUloy6Xeh0Xk0BPLThGZIiL50iJzrq6FaNasIXPm/GZTuly5clK3Tk3mzFkMwKNHj7h167Z5/Tdff86w4WOx9nFfXbt24OuvfwRAKRXvQE4LNapX4e+/z3D69DkePXrE0qWrad2qabx4/fr2YOWq9Vy+ci1OuKtrYZo3a8Ts2XHrLjQ0jBMn/o63neDgECIjTQ8qDgk5TtasWcmcOTMAOXJk56OBPRk3Pm6DuH3Hbu7duw/A3n37cXMtTHrYuWsv12/cTHS9UoqcOU1f6Dlz5uD69ZtERUUluU2/zX8SHW2anOS/NwhXoyz37t03h2fNmiXBY6ZkyWIULJCfnbv2Pk1xrNKqVVMWLFwOwN59QTjncaZQoYLx4jWoX5sVK9YDsGDBMnxam46ZPf6B3Lx5C4hbvqQopciV2/Tlnts5FxcizQ+ypnXrppw+dY6jR4+bw+7du8/2HbsB0/+5oAOHzftJ72MlxobFntnyVO+NwHqgs7GsBXYCFzE9CDHVTfxmFMOGjyPmief49erdlcAAX2bMmEiePM7x0hUrVoQrV64za9Zk9vpvZNq0r8096JYtXuPChYscPnwsXjoPD3f2+m/Ez28ZtWvXADD/1B31+WD892xg0cJpFCyYP7WLGo+LayHOhz9+Knt4RCQuLoXixnEpRBsfb2bMjH9LlMmTRjN02Jfx6s4abdu2IDj4CA8fPgRgzKghTP52Bnfv3ks0TfduneL1pp6VqT/NoexLpTh/NojgoC0M+vhzc8OqlGLjht/Y67+R997tnGD67t06xilLjepVOBi8leCgLfTpN9TcYMfq2MGHZcvWpF2BAFeXQoSff3w8RIRH4vrE8ZAv3wvcvHnLnL/wiEhcXOPGAejRPW75EquTQZ98zlfjR3L67wC+nvAZI0aOByB79mwM+aQvY76cnGh+nZ1z07LFa2zdtiveuvQ4Vp7HBrq2UmqYUuqwsYwA6imlvgI8nowsIj1FJFBEAqOj/7U5Y82bNeLKlWscOHA4TvjMmQsoW7YO1Ws05eLFy3z11Wfx0jo6OlKlysvMnDmfml7NuHvnLoMH9yVbtqx8+ml/Ro+ZFC9NZORlSpaqSU2vZgwZMoZ5834gV66cODo64O7mwu49AXi90py9e4OYMGGkzeWxlSRwCeqTvbfJk0Yn+AXWonljLl++StATdWeNcuVKM37scHr3/RQwjUOWKOnB6tV/JJrmrbfa4lmtEhMnTbN5f2mhSZP6HDwYgnvRqlSr3oTvvv2SXMYQ2av121CjpjctW71N797dqFunZpy0w4YOICoqikWLVprD9gUcoFLlhnjVas7QIf3IkiVLnDTt2/uweMnvaVoma44Ha+LUr1eL7t07MWz443MsidXJBz3f4ePBoyhWojofDx7NrBmm/zej/vcJ334/izt37iaYVwcHBxYumMqPU2dz+vS5OOvS61iJFusXe2ZLA51TRMxHs4jUAGIHhuP9flRKzVRKeSqlPB0ccj65Olmv1PKkRYvXOH58NwvmT6V+/drMmfMdly9fJSYmBqUUs2cvinfiAiAiIpLwiEgCAoIBWLlqA1Uqv0zx4h54eLgTELCJ48d34+ZaGH//jbz4YgEePnzI9es3AThw4DCnTp2lVKniXLt2gzt37pobqBUr1yV6giY1RYRH4u7mYv7s5lrYPAQRq1rViiz89SfCTvjTrm0Lfvx+HK1bN6VWLU9atWxC2Al/Fv76Ew0a1Gbe3O+T3aera2GWL/uF7j0GcurUWQC8alajapUKhJ3wZ8e23yldqjhb/JaZ0zRqWJdhQwfQpm03c4/7Wev2TgdWGePBf/99hjNnzvNSmZIA5jq8cuUaq1dvpHr1yuZ0Xbq8SYvmjenyTr8EtxsaGsadO/d4uXwZc1jFiuVwdHR8qi/D5PTu1dV8EvJC5EXc3B8fD65uheMMOQBcvXqdPHmccXBwAIxj5sLjOBUqlGXG9G9o264H168/HqZLrE7e6fImq1aZ6nH58rXm8Bo1qjBh3AjCTvgzoP97DP20P316dzNvb/q0rzkZdprvf/g5Tv7S81h5HnvQ7wE/i8hpETkD/Ay8LyI5gPGpnbHPPvuKEiVrUKZMLbq805ft2/+ie/eBccbdfFp7ExJyPF7aS5euEB4eSelSxQFo0KA2x46dJCQkFPciVShTphZlytQiPCISL69mXLp0hfz585Ipk6k6ihUrQskSxczf/uvXb6ZevVeMbdWJd6IuLQQEBlOyZDE8PNxxcnKifXsf1q7zjROnVJlXKFnai5KlvVixcj39BgxnzZpNjBg5AY/inpQs7UXnt/uwbdtfdO2W9GxIZ+fcrFk9nxEjx7N7T6A5fMbM+RTxqEbJ0l7Ua9CGEydPmU8UVa5cnp+mTuD1tt258sQY+LN07nwEDRvWAaBgwfyULl2cU6fPkj17NnLmzAGYfqa/1rie+fhp2qQ+gz/pQ5u23cxjpWAa9opt8IoUcaV06eKcOXvevL5jBx+WpFHvedr0eXhWb4Jn9SasWbOJLp3fAKBmjarcvnWbixcvx0uzfcdu2rUzzebp0uVN1qw1HTPu7i4sWzKLbt0HcvLkKXP8pOrkQuQl6r1qOu4bNqjDybDTANRv2NZ83H3/w89M+OoHfpo2F4Axo4fg7JyLQR9/Hidf6X2sPDezOGIppQKACiLiDIhS6qbF6qWpnbHEjBs3nEoVy6OU4uzZcPr2GwpA4cIvMn3a1/i06QrARx99xty5P5A5sxOnT5/j/Z4fJ7ndOnVq8vn/PiYqKpro6Gj69x/GDeNE1IiR45g9+zsmfjOKq1evJbut1BAdHc3AD0eyYf0iHDJlYu68JRw9eoKe73cBYOasp7sVt4+PN99N+ZICBfKyZvV8Dh4MoXnLzvTt052SJTwYMfxDRgz/EIBmzTsl+Z/pq/GfkTNnDhb/ZppRc/58BK+37f5U+bLFrwumUu/VV8ifPy9nTgUyesxE83SymbMWMHbct8z+eQoHgjYjIgwbMY5r125QrFgRli/7BQBHRwcWL/6dTcbsl+++/ZIsWbLwx0bTieW9e4Po228otWvXYMjgvjx6FEVMTAz9BgyPc5L4jXataOXTJc3LvGHjFry9G3L82F/cvXeP994bZF63dvV8evYaTGTkJYYNH8uiX39izKghBB8MYbZxgn3kiI/Il+8FfjCmj0ZFReH1SnNefLFAonXSq9dgJk8eg6OjIw/u36d37yFJ5tHVtTDDhw3kWOhJAvZtAuCnn+Ywe85v6X6sZJRZHJLcTAYReVsp9auIDEpovVIq8TMFhixZ3e39iyrdRD/FSTtNe55EPYxIcfM6pcjbVrc5H5371W6bc2t60DmM11xJxtI0TbMTGeWG/dZcqDLDeE3by6Q0TdNSSUYZ4rDlQpXSIrJFRI4YnyuKSNrPN9M0TbNRas7iEJHZInI5tu0zwvKKiJ+InDReX7BYN0xEwkTkuIg0tQivZlzwFyYi30tC8yKfYMssjlnAMOARgFLqEKb7Q2uaptmVVJ7FMRd48h4QQ4EtSqlSwBbjMyJSDlO7WN5I85Px/FaAaUBPoJSxxL+vxBNsaaCzK6X2PRGW9PWzmqZpz0AMyuolOcZTo64/EewDxN6naB7QxiJ8sVLqgVLqNBAG1BCRwkBupdQeZZqZMd8iTaJsaaCvikgJjC8dEXkDiLQhvaZpWrqwZYjD8qpnY+lpxS5eVEpFAhivsRdouALnLeKFG2Guxvsnw5Nkyw37+wIzgZdEJAI4jemeHJqmaXbFllkcSqmZmNq21JDQuLJKIjxJtjTQEcAcYBuQF7gNdAXG2LANTdO0NJcOszguiUhhpVSkMXwRe1lnOOBuEc8NuGCEuyUQniRbhjhWA60wnSS8APwL3EkyhaZp2jOQmmPQiViDqYOK8braIryjiGQRkWKYTgbuM4ZB/hERL2P2xjsWaRJlSw/aTSmV7FlHTdO0Zy01L10Wkd+A+kB+EQkHPgcmAEtF5F3gHPAmgFIqRESWAkcxTaLoq5SKHXHpjWlGSDZMt2/emNy+bWmgd4tIBaVU6t+2S9M0LRWl5g0VlFKdElnVKJH4Y4GxCYQHAjbdCtOah8YexvSF5Ah0F5FTmB4aK6Z9qopJpdc0TUtv0XZ/nzrrWNODbpnmudA0TUtFGeWWZNbci+NsemRE0zQttaTg5J9dsWUMWtM07T8hYzTPuoHWNC0Dem6GODRN0/5rVAbpQ+sGWtO0DCdKN9Capmn2KWM0z7qB1jQtA9KzODRN0+yUPkmoaZpmp/RJQk3TNDule9A2iI7JKNWladp/wfN0Lw5N07T/lBiVMRpoq2/YLyLZReQzEZllfC4lIvpGSpqm2Z1Ufqr3M2PLE1XmYLrN6CvG53Dgy1TPkaZpWgqlwxNV0oUtDXQJpdTXmB55hVLqHgk/CFHTNO2ZUjb8s2e2jEE/FJFsGL8KRKQEph61pmmaXXkeL/X+HPgDcBeRhUBtoFtaZErTNC0l7L1nbC2rGmgRyQS8ALQFvDANbQxUSl1Nw7xpmqY9lYwysdeqBlopFSMi/ZRSS4H1aZwnTdO0FFEZZJqdLUMcfiLyCbAEuBMbqJS6nuq50jRNSwF7n51hLVsa6B7Ga1+LMAUUT73saJqmpdxzNcQBoJQqlpYZ0TRNSy3RGaSJtrqBFhEnoDfwqhG0HZihlHqUBvnSNE17as/jGPQ0wAn4yfjcxQh7L7UzpWmalhIZo/9sWwNdXSlVyeLzVhE5mNoZ0jRNS6mMMg/alku9o42rBwEQkeJAdOpnSdM0LWVS814cInJGRA6LSLCIBBpheUXET0ROGq8vWMQfJiJhInJcRJqmpBy29KAHA9tE5BSmC1WKAt1TsnNN07S0kAZj0A2euDBvKLBFKTVBRIYanz8VkXJAR6A84AJsFpHSSqmn6szaMotji4iUAspgaqBDlVL6XhyaptmddJjF4QPUN97PwzRp4lMjfLHRNp4WkTCgBrDnaXZiy/2g+wLZlFKHlFIHgewi0udpdqppmpaWYpSyehGRniISaLH0fGJzCvAVkf0W615USkUCGK8FjXBX4LxF2nAj7KnYMsTxvlJqqjnHSt0Qkfd5PKtD0zTNLtgywKGUmgnMTCJKbaXUBREpiOmK6tAk4iZ0C+anHm+x5SRhJhEx71xEHIDMT7tjTdO0tJKaJwmVUheM18vAKkxDFpdEpDCA8XrZiB4OuFskdwMuPG05bGmgNwFLRaSRiDQEfsN0+1FN0zS7kloNtIjkEJFcse+BJsARYA3Q1YjWFVhtvF8DdBSRLCJSDCgF7HvactgyxPEp0BPT1YQC+AI/P+2ONU3T0kq0SrWThC8Cq4zBA0dgkVLqDxEJwNRhfRc4B7wJoJQKEZGlwFEgCuj7tDM4wIYetFIqRik1XSn1BvA+sCclO07KlMljCD26i6D9flSp/HKCcWbOmMj+QD+C9vuxZPFMcuTIDkCrVk0I2u9HYIAv/ns2ULtWdQBKly5BYICvebl+NZQB/eNeBDnoow+IehhBvnymKY15877AZt9l3Lx+gu++ffz4xZw5c8TZ1sULh5k0cXSal9nDw53du9ZyLGQXixZOw8nJyar0mTJlImDfJlavmmcOq1SpPH/tXGuup+qelc3rPh3Sj9Cjuwg58idNXqtnDu/QwYcDQZsJ2u/H+rW/muspc+bMLFo4jdCju9i9ay1Fi7qZ06xf+ytXLx+Ns+/0qpdOnV4naL/pGNm5YzUVK5Yzpwk74c+BoM3m8ltTLwDu7i7cvH6CQR99AEC2bFlZ8/t8jhzewcHgrYwbO8wc98OBPTl0cBtB+/3w/WMJRYrYdq6oaZP6hBz5k9CjuxgyuG+CcRKrn8TS/u+zQZw9HWg+dpt5NwTAycmJn2dN5kDQZvYH+lHv1VfMaapWqcCBoM2EHt3FlMljzOGTvhll3s7RkJ1cvXzUvK5Llzc5FrKLYyG76NLlTXP49q0rzWnOndnPiuW/2FQn1kqtR14ppU4ppSoZS3ml1Fgj/JpSqpFSqpTxet0izVilVAmlVBml1MaUFUQpqxZM00hyA3kxfWPsByZbk9bByUVZu7Rs9bbauHGLcnByUbVqt1R79+5PMF6evKXN76dMmaGGDR+rHJxcVO48Jc3hlas2UsdCT8ZL65TFTUVGXlLFSlQ3hxUt5qk2bdqmzpw5rwoWKq8cnFxULucS6tV6Pqp3n0/Vj1NnJ5rnwP0HVf0Gr1tdxqct89Jla1Snzr2Ug5OLmj5jvurTd6hV6T/+ZJRa9NtKtW6dnznM13e7atGyszn99u1/KQcnF/VyxXoq+GCIypbDQ5UoVVOFhZ1WTlncVOas7urSpSvmuvlm4lQ1esxE5eDkovr2G6amz5ivHJxcVKfOvdSSpavN+3mtSXvl06ZrnH2nV73Uqdta5StQVjk4uagWLTvHSX/69DlzWSyXxOoldlmxcp1atnytGjxktHJwclE5cxdXjRq/oRycXFTW7EXVzp3+5vSNGr+hcuYurhycXFSfvkPj1Etyi1MWNxUWdlqVLO2lsmYvqoIPhqiXK9azqn6SSjt6zERz3i2Xfv2HqTlzFysHJxdVyKWCCtx/UDlmdlUOTi5q374gVbtOK+Xg5KI2btxiLp/lMmDgCDV7zm/KwclF5S9YTv399xmVv2A5la9AWfX332fMf4cn67Jr9wHxwq1tk5JaqhWqo6xdUmN/abXYMgbtrJS6jempKnOUUtWAxin6dkhAq1ZNWbBwOQB79wXhnMeZQoUKxov3zz//mt9nzZbVPDH9zp275vAc2bMnOGG9UcM6nDp1lnPnIsxhkyaOYujwsXHi3717j792B3D/fuLTvUuWLEbBAvnZuWuvDaWMy9oyN6hfmxUrTM9LWLBgGT6tmyab3tW1MM2bNWL27N/ibEspRa7cuQDI7ZyLC5GXAGjdqilLl67m4cOHnDlznr//PkON6lUQEUTE/EslV65cXLgQm6YJCxYsA2DFivU0bFDHvJ+t23bF+VulZ73s8Q/k5s1bAPjvDcLVtXCy+0ysXgBat27K6VPnOHr0uDns3r37bN+xG4BHjx4RdOCweT/bd+zm3r37Rv7342bF/mPVqF6Fv/8+w+nT53j06BFLl66mdau4F6UlVj/WpH1S2bKl2bptFwBXrlzj1s3beFarRKFCBcmVOxf+e/cDsGDhclq39o6XvmOHNixZ8jsATZrUY/OWndy4cZObN2+xectOmjatHyd+zpw5aFC/NqtXp81prOfxqd6OxtnK9sC6NMoPri6FCD//+KRnRHgkri6FEoz786zJRJwP5qUyJflx6mxzuI+PN0cO72DN6nm8//7H8dK1b+/DYuNgAmjZ8jUiIiI5dOhovLjJ6djBh2XL1ticzpI1Zc6X7wVu3rxFdLRpVCk8IhIX10LJpp88aTRDh31JTEzcMblBn3zOV+NHcvrvAL6e8BkjRo4HwMWlEOfDH28rdj9RUVH07T+M4KAtnD8bRLmypZg9x9Tou7g+ThMdHc2tW7fNwx/Psl4s9ejekT82bTN/VkqxccNv7PXfyHvvdjaHJ1Yv2bNnY8gnfRnz5eRE8+vsnJuWLV4zN3SWunfrFGf/ybGsU3O5nih7YvWTXNo+vbsTtN+PWTMnkSePMwCHDh2ldaumODg44OHhTtWqFXBzd8HVpRAR4ZHx9mGpSBFXPDzc2brtr8f5sth/RET8NG3aNGPrtr+e+ss7Obb0Uu2ZLQ30GEwzOcKUUgHGvThOJhbZcvJ3TMydxKIllC5eWGKV+N77g3AvWpVjoSdp/2Zrc/jq1X/wcoV6tHvjXUaPGhwnjZOTE61aNmH5CtN3TLZsWRk+dACjRk+0Oo+Wnmzsn4Y1ZU4qTmLrWjRvzOXLVwk6cDje+g96vsPHg0dRrER1Ph48mlkzJiW5LUdHR3r1fAfPGk1xL1qVQ4ePMfTT/kmkSaiktklpvcSqX68W3bt3YtjwceawV+u3oUZNb1q2epvevbtRt05NIPF6GfW/T/j2+1lxfqFZcnBwYOGCqfw4dTanT5+Ls+6tt9riWa0SEydNs6LU1pcrsThJpZ0+Yz6lX6pFNc8mXLx4mW++/h8Ac+YuJiI8kr3+G5k8aTR79gQSFRWV8Lae6HV2aO/DipXrzZ0Aa46Hjqnw/yYpz10PWim1TClVUSnVx/h8SinVLna9iAx7Iv5MpZSnUsozU6YcSW67d6+u5hMHFyIv4ubuYl7n6lY4zs/MJ8XExLBs2Rravt4i3rqdu/ZSvHjROL05b+8GHDhwmMuXTZfVlyjhgYdHEYIC/Qg74Y+bW2EC9m7ixRcLJF0hQMWK5XB0dEywAUyOrWW+evU6efI44+DgAICba2EijSGG8IjIBNPXquVJq5ZNCDvhz8Jff6JBg9rMm/s9AO90eZNVq0wnx5YvX0v16pUBU2/H3e3xtmL3U7lSeQBOnTprTvOKVzVTmvDHaRwcHHB2zs316zdsrpPUrheAChXKMmP6N7Rt1yNOniKN7Vy5co3Vqzeay59YvdSoUYUJ40YQdsKfAf3fY+in/enTu5t5e9Onfc3JsNN8/0PciU2NGtZl2NABtGnbjYcPH1pdD5Z1ai7XE2VP7O+eVNrLl68SExODUoqff1loLl90dDQfDx6FZ/UmtG3Xgzx5nAkLO014RCSuboXj7uNC3Hy0b+/DkiWrzZ/DIyJxs9i/q2thLkReNH/Om/cFqlevwoYNW6yuD1tFqxirF3tmSw86OW8mHyVh06bPw7N6EzyrN2HNmk106fwGADVrVOX2rdtcvHg5XpoSJTzM71u2eI3jx8PihVep/DKZMztx7drj/5gdO7SJ88195EgoLm6VKFnai5KlvQgPj6R6zaZcunQl2Xx37OBjHnez1dOUefuO3bRrZ/oi6tLlTdas9QVg3TrfBNOPGDkBj+KelCztRee3+7Bt21907TYAgAuRl8xn6hs2qMPJsNMArF3nS/v2PmTOnBkPD3dKlizGvoADRFy4SNmypcifPy8AjRu/SmhomDlN7Jn6du1asG37X09VJ6ldL+7uLixbMotu3Qdy8uQpc/zs2bORM2cO8/vXGtcjJOR4kvVSv2Fb8zHy/Q8/M+GrH/hp2lwAxowegrNzLgZ9/HmcfFWuXJ6fpk7g9bbduXLlmk31EBAYTMmSxfDwcMfJyYn27X1Yu843TpzE/u5JpbUcw2/j08xc7mzZspI9ezYAGjeqS1RUFMeOneTixcv888+/1KxR1VS/nd9g7dpN5m2ULl2CF/I4s8c/0Bzm67uD1xq/Sp48zuTJ48xrjV/F13eHef0b7VqyfsNmHjxIu1v5pNYsjmfNlnnQyUnoEkebbdi4BW/vhhw/9hd3793jvfcGmdetXT2fnr0Gc/HiZeb88i25cudERDh06Ch9+5k68G1fb87bb7/Bo0dR3L93n7c69zanz5YtK40bvUrvPp9anZ+wE/7kzp2TzJkz49Pam2YtOnHsmGlk5412rWjl0yVdyhwZeYlhw8ey6NefGDNqCMEHQ8xjwEmlT0yvXoOZPHkMjo6OPLh/n969hwBw9OgJli9fy+GD24iKjmbAwBHExMQQGXmJL76cwratK3n06BHnzkXQ492PAJg9ZzHz5n5P6NFd3Lhxk7fefnyLlu1bV1KmTEly5szOmVOB9PzgY3z9diSYp9Sul5EjPiJfvhf44QfT0EZUVBRerzTnxRcLsHyZaXqXo6MDixf/zibf7UnWS2JcXQszfNhAjoWeJGCfqeH66ac5zJ7zG1+N/4ycOXOw+LcZAJw/H8Hrba27AWR0dDQDPxzJhvWLcMiUibnzlnD06Al6vm863mbOWpBo/SSWFmDC+JFUqlQOpRRnz4ab/y8ULJifDesXERMTw4WIi3TtPsCcl379hvHLL1PIljUrf2zaxsY/tprXdezgw9Jlj3vPADdu3GTsuG/x3206cfvl2CncuHHTvL5D+9Z8/c1U0lKMnY8tW0tSa5BcRIKUUlUTWueY2TVj1JamaWku6mFEijt7LxWsbnWbE3o5IFU6l2nB7nrQmqZpKZVRetBWjUGLiIOIfJRMtGWpkB9N07QUyyhj0FY10Mp0SbdPMnHGJbVe0zQtvWSUWRy2DHH8JSI/AksA88RmpVRQqudK0zQtBZSdN7zWsqWBrmW8jrEIU0DD1MuOpmlaytn7BSjWsuWZhA3SMiOapmmpxd4v4baWLc8kdBaRyRbP7ZokIs5pmTlN07Sn8dxd6g3MBv7BdLOk9sBtYE5aZErTNC0lomNirF7smS1j0CUs770BjBaR4FTOj6ZpWorZ+/Q5a9nSg74nIuYb/YpIbeBe6mdJ0zQtZTLK7UZt6UH3BuYZ484CXAe6pUWmNE3TUsLex5atZcssjmCgkojkNj7fTqtMaZqmpYS994ytlWwDLSIJ3hot9qbcSqnEHzGhaZr2DGSUe3FY04POlea50DRNS0X2fgm3tZJtoJVSo9MjI5qmaaklowxx2HKhipuIrBKRyyJySURWiIhbWmZO0zTtacQoZfViz2yZZjcHWAO4AK7AWvSFKpqm2aHn6najhgJKqTlKqShjmQsk/2RVTdO0dPY89qCvisjbxs37HUTkbcC2J2FqmqalgxgVY/Viz2xpoHtgugfHRSASeAOw7gmYmqZp6Sg1ryQUEW8ROS4iYSIyNB2yb2bLlYRfAF2VUjcARCQvMBFTw61pmmY3UvFh2A7AVOA1IBwIEJE1SqmjqbKDZNjSg64Y2zgDKKWuA1VSP0uapmkpo2xYklEDCFNKnVJKPQQWk8zj/1KTLT3oTCLywhM9aKvSp8Zj1FODiPRUSs181vmwB7ouHtN1YZKR6sGWNkdEegI9LYJmWtSDK3DeYl04UDPlObSOLT3oScBuEflCRMYAu4Gv0yZbaaZn8lGeG7ouHtN1YfJc1oNSaqZSytNisfySSqihT7epH7bcLGm+iARiegahAG3TaxxG0zTtGQkH3C0+uwEX0mvntgxxYDTIulHWNO15EQCUEpFiQATQEXgrvXZuUwOdAWSI8bVUouviMV0XJroenqCUihKRfsAmwAGYrZQKSa/9S0a5qYimaVpGY8tJQk3TNC0d6QZa0zTNTukGOoMTkQ0ikieB8FEi8onxvpuIuFisOyMi+dMxmykiIh4icsSG+L1E5J1k4nQTkR8TWTfc1jxq2tPQDXQGp5RqrpS6mUy0bphuI/tcUEpNV0rNT8Em7LKBtvzS1TKG/2wDbfSaQkXkZxE5IiILRaSxiPwlIidFpIax7BaRA8ZrGSNteRHZJyLBInJIREqJSA4RWS8iB43tdXjWZbSGiAwRkQHG+ykistV430hEfrXsDYvICOOmL5uB2Lp4A/AEFhr1kc3YdH8RCRKRwyLyUvqXzGYOIjJLREJExFdEsolICRH5Q0T2i8jO2HI88euhunEM7BGRb57oibsY6U+KyNdG/AlANqOuFqZ/MVOPiKTLLC7jfhba07Dlrk/2tAAeQBRQAdMXzX5gNqaLaHyA34HcgKMRvzGwwnj/A9DZeJ8ZyAa0A2ZZbN/5WZfRynrwApYZ73cC+wAn4HPgA+AMkB+oBhwGshv1EgZ8YqTbDnhabPMM0N943wf4+VmX08pjobLxeSnwNrAFKGWE1QS2Gu9HWZT9CFDLeD8BOGK87wacApyBrMBZwN1Y9286l+8d4BBwEFgAFDXKdsh4LZJAuSoD/kacVcALFn/rccAO4ONE9vemUS8HgT+NMAdMN0c7bGwz9vhoBBwwwmcDWSyOof8BuzDNHW4C7AGCgGVAzmd93PwXlv9sD9pwWil1WCkVA4QAW5Tp6DiM6T+tM7DM6BVNAcob6fYAw0XkU6CoUuqekaaxiHwlInWVUrfSuzBPaT9QTURyAQ8wlc0TqIupwY5VF1illLqrlLqN6ek4SVlpsX2PVM1x2jitlAo23sfmuRamv38wMAMobJnAGJvPpZTabQQtemKbW5RSt5RS9zFdoFU0TXKeBBEpD4wAGiqlKgEDgR+B+UqpisBC4PsEks4HPjXiHMb0hR0rj1KqnlJqUiK7/R/Q1NhfayOsJ1AMqBK7XxHJCswFOiilKmC6rqK3xXbuK6XqAJuBkUBjpVRVIBAYZEs9PK/+6w30A4v3MRafYzAdLF8A25RSLwOtMPWEUEotwnTg3QM2iUhDpdQJHvcyx4vI/9KnCCmjlHqEqbfSHdP9UXYCDYASwLEno9uw6di6jOa/cUGT5bEQDeQFbiqlKlssZZ9Ik9wNdZ7c5rOoh4bAcqXUVTDfRfIVHn+ZLADqWCYQEWdMjfAOI2ge8KpFlCXJ7PMvYK6IvI+p5wymX6DTlVJRFvkog+mL8UQy+/ECygF/GV+WXXkGX3b/Rf/1Bjo5zpguzwTTT1YARKQ4cEop9T2mnmRFYxbDXaXUr5h+ylVN57ymxJ/AJ8brTqAXEGz8mrCM87oxNpsL0xdWrH+AXOmV2XRyGzgtIm8CiEklywjKdGfGf0TEywjqaOW2H4mIU+plNUlC8l+stl5tdifJjSnVC1OP1x0IFpF8ieQjuS+42P0I4GfxRVlOKfWujXl+LmX0BvprTL3hv3jcEwDoABwxvs1fwvRzsAKwzwgbAXyZvllNkZ2Yfr7vUUpdAu4Td3gDpVQQph5NMLDiifVzgelPnCTMCDoD74rIQUxDYAndx/ddYKaI7MHUkFgztDUTOJROJwm3AO2NRjL2Nr+7efxl0hnTOK+ZMTx3Q0TqGkFdMI05W0VESiil9iql/gdcxdRQ+wK9Yk8sGvkIBTxEpGQy+/EHasfGE5HsIlLa2vw8z/Sl3tpzTURyKqX+Nd4PBQorpQY+42zFISJdgcGYhlkOYDoZOBvTyd8rQHel1DkRGYXpBOZEEakMTMd0UviUEeeGiGzHdCIxMIn9rQRKYfrC2gJ8iKmD8zXgDTzCdEL9RxFphOkXpyOmGwv1Vko9EJEzmE48XzW22RD4Cshi7GakUiq58yDPPd1Aa881YzrlMEwNzFmgm1LqyrPNlaaZ6AZa0zTNTv0Xzs5rmpYGRGQEpjnPlpYppcY+i/xo8eketKZpmp3K6LM4NE3T/rN0A61pmmandAOtaZpmp3QDrWmaZqf+D+7s1WBJ1f5yAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sn.heatmap(covMx, annot=True, fmt='g')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df9445db",
   "metadata": {},
   "source": [
    "# تمرین 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "1059e787",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "mass           3027.071888\n",
       "width             0.667387\n",
       "height            1.852367\n",
       "color_score       0.005907\n",
       "dtype: float64"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# تمرین 3\n",
    "arr = []\n",
    "for i in dataset.var(0):\n",
    "    arr.append(i)\n",
    "dataset.var(0)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "279aea0a",
   "metadata": {},
   "source": [
    "### خروجی واریانس برای دیتاست ماست که درواقع واریانس را برای هر فیچر یا ستون محاسبه میکند"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "9dff12b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3027.0718877849226"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max(dataset.var(0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "ac64d3cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.005907071887784927"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min(dataset.var(0))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "425ef0f2",
   "metadata": {},
   "source": [
    "### به سادگی بیشترین مقدار واریانس و کمترین آن را بدست آوردیم ، اما سوال ازما نام فیچر را هم میخواهد ، پس به محاسبه ادامه میدهیم"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "9dc69e8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'mass': 3027.0718877849226, 'width': 0.667387492694331, 'height': 1.852367036820572, 'color_score': 0.005907071887784927}\n"
     ]
    }
   ],
   "source": [
    "varArray = np.array(dataset.var(0))\n",
    "headset = [\"mass\" , \"width\", \"height\" , \"color_score\"]\n",
    "df3 = pd.DataFrame(varset)\n",
    "dictvar = {}\n",
    "for i in range(0,4):\n",
    "    dictvar[headset[i]] = varArray[i]\n",
    "print(dictvar)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44aaf0e8",
   "metadata": {},
   "source": [
    "### در این مرحله پس از محاسبه واریانس ها به کمک کتابخانه نامپای ، در ادامه با استفاده از دیکشنری و یک حلقه  مقادیر واریانس ها را به فیچر ها نسبت میدهیم و در دیکشنری مد نظر ذخیره میکنیم"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "a5e18af2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the most value for cov is in : mass\n",
      "3027.0718877849226\n"
     ]
    }
   ],
   "source": [
    "print(\"the most value for cov is in : \"+ list(dictvar.keys())[list(dictvar.values()).index(max(dictvar.values()))] )\n",
    "print(max(dictvar.values()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "143c6e4f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the min value for cov is in : color_score\n",
      "0.005907071887784927\n"
     ]
    }
   ],
   "source": [
    "print(\"the min value for cov is in : \"+ list(dictvar.keys())[list(dictvar.values()).index(min(dictvar.values()))] )\n",
    "print(min(dictvar.values()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a6e6f6d",
   "metadata": {},
   "source": [
    "### حالا در انتها توانستیم مقادیر واریانس و نام فیچر را به کمک دیکشنری ایجاد شده و توابع آماده برای پیدا کردن ماکس و مین ، پیدا کنیم و برگردانیم"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da5a4e13",
   "metadata": {},
   "source": [
    "# تمرین 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "894bf631",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 3.02707189e+03  3.94493863e+01  4.56456458e+01 -3.37416715e-01]\n",
      " [ 3.94493863e+01  6.67387493e-01  4.41241964e-01 -4.80800701e-03]\n",
      " [ 4.56456458e+01  4.41241964e-01  1.85236704e+00 -2.58421975e-02]\n",
      " [-3.37416715e-01 -4.80800701e-03 -2.58421975e-02  5.90707189e-03]]\n"
     ]
    }
   ],
   "source": [
    "# تمرین شماره 4\n",
    "covMx = pd.DataFrame.cov(df)\n",
    "covMx.head()\n",
    "\n",
    "covArr = np.array(covMx)\n",
    "print(covArr)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77aedf09",
   "metadata": {},
   "source": [
    "### با استفاده از پانداس ماتریس کوواریانس را برای دیتاست تشکیل میدهیم"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "a2a8afe5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "first max was for mass/mass , so we go for second max:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "45.64564582115722"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "headset = [\"mass\" , \"width\", \"height\" , \"color_score\"]\n",
    "\n",
    "maxValue = np.amax(covArr)\n",
    "print(\"first max was for mass/mass , so we go for second max:\")\n",
    "\n",
    "flat=covArr.flatten()\n",
    "flat.sort()\n",
    "flat[-2]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c232deee",
   "metadata": {},
   "source": [
    "#### بزرگترین مقدار برای کوواریانس را میخواهیم با شرط اینکه هر دو فیچر اعمال شده در فرمول ریاضی کوواریانس یکسان نباشند\n",
    "بیشترین مقدار ، مربوط به دو فیچر یکسان است پس از آن عبور کردیم و تصمیم گرفتیم با مرتب کردن آرایه خطی ای که از ماتریس به دست آوردیم، دومین بیشترین مقدار را انتخاب میکنیم و در ادامه بررسی میکنیم که ببینیم آیا دو فیچر یکسان این مقدار را خروجی داده است یا خیر"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "925918f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.3374167153711281\n"
     ]
    }
   ],
   "source": [
    "minValue = np.amin(covArr)\n",
    "print(minValue)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5343a0c3",
   "metadata": {},
   "source": [
    "### کوچکترین مقدار کواریانس را برمیگردانیم "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "f931b506",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mass</th>\n",
       "      <th>width</th>\n",
       "      <th>height</th>\n",
       "      <th>color_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>mass</th>\n",
       "      <td>3027.071888</td>\n",
       "      <td>39.449386</td>\n",
       "      <td>45.645646</td>\n",
       "      <td>-0.337417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>width</th>\n",
       "      <td>39.449386</td>\n",
       "      <td>0.667387</td>\n",
       "      <td>0.441242</td>\n",
       "      <td>-0.004808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>height</th>\n",
       "      <td>45.645646</td>\n",
       "      <td>0.441242</td>\n",
       "      <td>1.852367</td>\n",
       "      <td>-0.025842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>color_score</th>\n",
       "      <td>-0.337417</td>\n",
       "      <td>-0.004808</td>\n",
       "      <td>-0.025842</td>\n",
       "      <td>0.005907</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    mass      width     height  color_score\n",
       "mass         3027.071888  39.449386  45.645646    -0.337417\n",
       "width          39.449386   0.667387   0.441242    -0.004808\n",
       "height         45.645646   0.441242   1.852367    -0.025842\n",
       "color_score    -0.337417  -0.004808  -0.025842     0.005907"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "covMx = pd.DataFrame.cov(df)\n",
    "covMx.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c9ab66a",
   "metadata": {},
   "source": [
    "### خب در جدول بالا که در واقع ماتریس کوواریانس ماست میبینیم که مقدار ماکس و مینیممی که بدست آورده ایم صحیح بوده و متعلق به دو فیچر یکسان نیست"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "784dc11f",
   "metadata": {},
   "outputs": [],
   "source": [
    "headset = [\"mass\" , \"width\", \"height\" , \"color_score\"]\n",
    "arrdata = np.array(dataset)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "682d9a36",
   "metadata": {},
   "source": [
    "### به وسیله قطعه کد بالا و کد زیر ، ماتریس دو در دو برای هر دو فیچر محاسبه میشود و پرینت میشود\n",
    "قطعه کد زیر به این صورت است که فانکشنی که کوواریانس محاسبه میکند و کتابخانه نامپای آن را توسعه داده است دو ورودی میگرد که هر کدام یکی از فیچر های ماست"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "010502c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mass\n",
      "[[3027.07188778 3027.07188778]\n",
      " [3027.07188778 3027.07188778]]\n",
      "mass\n",
      "----\n",
      "mass\n",
      "[[3.02707189e+03 3.94493863e+01]\n",
      " [3.94493863e+01 6.67387493e-01]]\n",
      "width\n",
      "----\n",
      "mass\n",
      "[[3.02707189e+03 4.56456458e+01]\n",
      " [4.56456458e+01 1.85236704e+00]]\n",
      "height\n",
      "----\n",
      "mass\n",
      "[[ 3.02707189e+03 -3.37416715e-01]\n",
      " [-3.37416715e-01  5.90707189e-03]]\n",
      "color_score\n",
      "----\n",
      "width\n",
      "[[6.67387493e-01 3.94493863e+01]\n",
      " [3.94493863e+01 3.02707189e+03]]\n",
      "mass\n",
      "----\n",
      "width\n",
      "[[0.66738749 0.66738749]\n",
      " [0.66738749 0.66738749]]\n",
      "width\n",
      "----\n",
      "width\n",
      "[[0.66738749 0.44124196]\n",
      " [0.44124196 1.85236704]]\n",
      "height\n",
      "----\n",
      "width\n",
      "[[ 0.66738749 -0.00480801]\n",
      " [-0.00480801  0.00590707]]\n",
      "color_score\n",
      "----\n",
      "height\n",
      "[[1.85236704e+00 4.56456458e+01]\n",
      " [4.56456458e+01 3.02707189e+03]]\n",
      "mass\n",
      "----\n",
      "height\n",
      "[[1.85236704 0.44124196]\n",
      " [0.44124196 0.66738749]]\n",
      "width\n",
      "----\n",
      "height\n",
      "[[1.85236704 1.85236704]\n",
      " [1.85236704 1.85236704]]\n",
      "height\n",
      "----\n",
      "height\n",
      "[[ 1.85236704 -0.0258422 ]\n",
      " [-0.0258422   0.00590707]]\n",
      "color_score\n",
      "----\n",
      "color_score\n",
      "[[ 5.90707189e-03 -3.37416715e-01]\n",
      " [-3.37416715e-01  3.02707189e+03]]\n",
      "mass\n",
      "----\n",
      "color_score\n",
      "[[ 0.00590707 -0.00480801]\n",
      " [-0.00480801  0.66738749]]\n",
      "width\n",
      "----\n",
      "color_score\n",
      "[[ 0.00590707 -0.0258422 ]\n",
      " [-0.0258422   1.85236704]]\n",
      "height\n",
      "----\n",
      "color_score\n",
      "[[0.00590707 0.00590707]\n",
      " [0.00590707 0.00590707]]\n",
      "color_score\n",
      "----\n"
     ]
    }
   ],
   "source": [
    "for i in range(0,4):\n",
    "    for j in range(0,4):\n",
    "        x = np.cov(df[headset[i]],df[headset[j]])\n",
    "        y = headset[i]\n",
    "        z = headset[j]\n",
    "        print(y)\n",
    "        print(x)\n",
    "        print(z)\n",
    "        print('----')\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "caeb3bc7",
   "metadata": {},
   "source": [
    "# شماره 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "406bf06b",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mass</th>\n",
       "      <th>width</th>\n",
       "      <th>height</th>\n",
       "      <th>color_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>28.881356</td>\n",
       "      <td>1.294915</td>\n",
       "      <td>-0.39322</td>\n",
       "      <td>-0.212881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16.881356</td>\n",
       "      <td>0.894915</td>\n",
       "      <td>-0.89322</td>\n",
       "      <td>-0.172881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12.881356</td>\n",
       "      <td>0.294915</td>\n",
       "      <td>-0.49322</td>\n",
       "      <td>-0.162881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-77.118644</td>\n",
       "      <td>-0.905085</td>\n",
       "      <td>-2.99322</td>\n",
       "      <td>0.037119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-79.118644</td>\n",
       "      <td>-1.105085</td>\n",
       "      <td>-3.09322</td>\n",
       "      <td>0.027119</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        mass     width   height  color_score\n",
       "0  28.881356  1.294915 -0.39322    -0.212881\n",
       "1  16.881356  0.894915 -0.89322    -0.172881\n",
       "2  12.881356  0.294915 -0.49322    -0.162881\n",
       "3 -77.118644 -0.905085 -2.99322     0.037119\n",
       "4 -79.118644 -1.105085 -3.09322     0.027119"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# شماره 5 \n",
    "#centering\n",
    "avg_arr = np.array(avg_clmns)\n",
    "#print(avg_arr)\n",
    "dfw = df \n",
    "for i in range(0,4):\n",
    "    dfw[i] = dfw[headset[i]] - avg_arr[i]\n",
    "centered = dfw.iloc[:, 4:8]\n",
    "centered.rename(columns={0: 'mass', 1: 'width', 2 : 'height' , 3 : 'color_score'}, inplace=True)\n",
    "centered.head()\n",
    "#now centered is a matrix that is centered\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "937c4804",
   "metadata": {},
   "source": [
    "### در این مرحله به کم کردن میانگین هر ستون از هر مقدار در آن ستون پرداختیم و بخشی از دیتاست را مانند یک جدول برگرداندیم ، توجه کنید که این جدول برگردانده شده تنها برای نمایش است و همه دیتاست را نشان نداده است ، اما در محاسبات همه دیتا ها و مقادیر لحاظ شده است"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b732a3ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "#cosine calculating\n",
    "List1 = centered.iloc[: , 0:1]\n",
    "List2 = centered.iloc[: , 1:2]\n",
    "List3 = centered.iloc[: , 2:3]\n",
    "List4 = centered.iloc[: , 3:4]\n",
    "lists = [List1,List2,List3,List4]\n",
    "cosarr = []\n",
    "cosres = []\n",
    "for i in range(0,4):\n",
    "    for j in range(0,4):    \n",
    "        result = 1 - spatial.distance.cosine(lists[i], lists[j])\n",
    "        if i == j :\n",
    "            continue\n",
    "        print(headset[i] )\n",
    "        print(result)\n",
    "        print(headset[j])\n",
    "        print(\"----\")\n",
    "        add = str(str(result)+ \" : \" + headset[i]+\" / \"  + headset[j])\n",
    "        cosarr.append(add)\n",
    "        cosres.append(result)\n",
    "#returning the max        \n",
    "print(\"-----------------------\")\n",
    "print(\"max and features :\")        \n",
    "maxrng = max(cosres)\n",
    "for i in cosarr:\n",
    "    if str(maxrng) in i :\n",
    "        maxrange = i\n",
    "print(maxrange)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b6d79f2",
   "metadata": {},
   "source": [
    "### در این مرحله مجبوریم یک آرایه ایجاد کنیم که هر خانه از این آرایه مقادیر یک ستون از دیتاست ما را در خود جای داده است\n",
    "سپس با دو حلقه تو در تو ، تمام حالات را دو به دو به ورودی فانکشن مد نظر میدهیم و مقادیر به دست آمده را در کنار  نام فیچر ها چاپ میکنیم\n",
    "در هر مرحله و در هر پیمایش یک جوین انجام میدهیم و نام هر دو فیچر که ورودی فانکشن محاسبه همبستگی کسینوسی بوده اند را  در کنار مقدار محاسبه شده برای همبستگی این دو فیچر ، در کنار هم قرار داده و به شکل استرینگ در یک آرایه پوش میکنیم ، این کار را در تمامی پیمایش ها انجام میدهیم\n",
    "\n",
    "حال برای بدست آورد ماکس و نام فیچر های به وجود آورنده آن از این آرایه استفاده میکنیم\n",
    "به این صورت که ابتدا مقدار ماکس را با استفاده از فانکشن آماده ماکس بدست میاوریم و سپس با استفاده از یک حلقه بررسی میکنیم که کدام عبارت ذخیره شده این عدد ماکس را شامل میشود و همان را برمیگردانیم\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "6c2c798a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mass</th>\n",
       "      <th>width</th>\n",
       "      <th>height</th>\n",
       "      <th>color_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>mass</th>\n",
       "      <td>1.00</td>\n",
       "      <td>0.88</td>\n",
       "      <td>0.61</td>\n",
       "      <td>-0.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>width</th>\n",
       "      <td>0.88</td>\n",
       "      <td>1.00</td>\n",
       "      <td>0.40</td>\n",
       "      <td>-0.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>height</th>\n",
       "      <td>0.61</td>\n",
       "      <td>0.40</td>\n",
       "      <td>1.00</td>\n",
       "      <td>-0.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>color_score</th>\n",
       "      <td>-0.08</td>\n",
       "      <td>-0.08</td>\n",
       "      <td>-0.25</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             mass  width  height  color_score\n",
       "mass         1.00   0.88    0.61        -0.08\n",
       "width        0.88   1.00    0.40        -0.08\n",
       "height       0.61   0.40    1.00        -0.25\n",
       "color_score -0.08  -0.08   -0.25         1.00"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#correlation\n",
    "cormat = centered.corr()\n",
    "round(cormat,2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "825a58d8",
   "metadata": {},
   "source": [
    "### برای تست خروجی ها ماتریس کوریلیشن را بدست آوردیم که البته نیاز هم نبود"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "8c3e4ec8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Scatter Plot WIDTH-MASS\n",
    "sn.scatterplot(x=\"width\", y=\"mass\", data=centered);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf07d0a0",
   "metadata": {},
   "source": [
    "### ترسیم اسکاتر ، با پاس دادن دیتاست سنتر شده و نام های فیچر ها به تابع اسکاتر پلات خروجی را رسم کردیم  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2371dde",
   "metadata": {},
   "source": [
    "# تمرین 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "beb9f10b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ALI\\AppData\\Local\\Temp/ipykernel_6648/1280477372.py:16: UserWarning: marker is redundantly defined by the 'marker' keyword argument and the fmt string \"y1\" (-> marker='1'). The keyword argument will take precedence.\n",
      "  plt.plot('x1', 'y1', data=df, marker='o', markerfacecolor='blue', markersize=5, color='skyblue', linewidth=1)\n",
      "C:\\Users\\ALI\\AppData\\Local\\Temp/ipykernel_6648/1280477372.py:16: UserWarning: color is redundantly defined by the 'color' keyword argument and the fmt string \"y1\" (-> color='y'). The keyword argument will take precedence.\n",
      "  plt.plot('x1', 'y1', data=df, marker='o', markerfacecolor='blue', markersize=5, color='skyblue', linewidth=1)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#تمرین شماره 6 \n",
    "\n",
    "import math  \n",
    "import matplotlib.pyplot as plt\n",
    "import numpy\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "def normal_pdf(x, mu=0, sigma=1):\n",
    "    sqrt_two_pi = math.sqrt(math.pi * 2)\n",
    "    return math.exp(-(x - mu) ** 2 / 2 / sigma ** 2) / (sqrt_two_pi * sigma)\n",
    "\n",
    "\n",
    "df = pd.DataFrame({'x1': dataset['width']})\n",
    "\n",
    "plt.plot('x1', 'y1', data=df, marker='o', markerfacecolor='blue', markersize=5, color='skyblue', linewidth=1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fa58c272",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "max :9.6 AND min :5.8\n"
     ]
    }
   ],
   "source": [
    "sorted_width = np.array(dataset['width'])\n",
    "sorted_width.sort()\n",
    "mx = max(sorted_width)\n",
    "mn = min(sorted_width)\n",
    "print('max :'+ str(mx)+ ' AND '+'min :' +str(mn))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c2cc0b3",
   "metadata": {},
   "source": [
    "### ستون یا فیچر مد نظر را از دیتا ست بیرون میکشیم و آن را به آرایه تبدیل میکنیم\n",
    "سپس این آرایه را مرتب میکنیم و مقدار ماکس و مین را بدست میاوریم\n",
    "\n",
    "این دو مقدار را در آینده نیاز داریم\n",
    "\n",
    "هدف تشکیل رنج مقادیر برای فیچر انتخاب شده است\n",
    "\n",
    "از کتابخانه های سای پای ، مت پلات لیب و استاتیستیکس استفاده میکنیم\n",
    "\n",
    "پلات که برای نمایش و تشکیل نمودار است \n",
    "\n",
    "استاتیستیکس برای محاسبه میانگین و استاندارد دیویژن استفاده میشود که ورودی این دو فانکشن یا رنج یا بازه تغییرات فیچر انتخاب شده است \n",
    "\n",
    "یا خود فیچر را انتخاب میکنیم و به همراه تمام اعضا به فانکشن محاسبه میانگین و استاندارد دیویژن پاس میدهیم\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "83e3c35d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import norm\n",
    "import statistics\n",
    "  \n",
    "# Plot between max and min of with coloumn with 0.001 steps.\n",
    "x_axis = np.arange(mn,mx, 0.001)\n",
    "  \n",
    "# Calculating mean and standard deviation\n",
    "mean = statistics.mean(x_axis)\n",
    "sd = statistics.stdev(x_axis)\n",
    "  \n",
    "plt.plot(x_axis, norm.pdf(x_axis, mean, sd))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f7255b5",
   "metadata": {},
   "source": [
    "### در طرح اول و محاسبات برای رسیدن به این نمودار ، از رنج یا بازه تغییرات مقادیر فیچر انتخاب شده استفاده کردیم، به این صورت که با استفاده از کتابخانه نامپای رنج تغییرات مقادیر این فیچر را با گام هایی به بزرگی 0.001 از مین به ماکس طی کردیم و خروجی یک آرایه است که آن را به ورودی فانکشن های محاسبات استاندارد دیویژن و میانگین پاس داده ایم\n",
    "\n",
    "پس از این با استفاده از پلات ترسیم را انجام داده ایم\n",
    "\n",
    "نکته بعدی استفاده از کتابخانه سای پای برای محاسبه تابع چگالی است که آن را برای ترسیم به پلات پاس میدهیم یا درون آن محاسبه میکنیم\n",
    "\n",
    "norm.pdf با استفاده از کتابخانه سای پای\n",
    "تابع چگالی بدست می آید"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "d0b50091",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculating mean and standard deviation\n",
    "# we are going deep down in width col in dataset\n",
    "mean = statistics.mean(dataset['width'])\n",
    "sd = statistics.stdev(dataset['width'])\n",
    "  \n",
    "plt.plot(x_axis, norm.pdf(x_axis, mean, sd))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a63badf",
   "metadata": {},
   "source": [
    "### در این حالت ، که خروجی آن را در تصویر بالا میبینید ، به جای استفاده از رنج تغییرات برای مقادیر فیچر مد نظر ، از خود مقادیر فیچر استفاده کردیم و باقی مراحل ثابت است"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b29c8666",
   "metadata": {},
   "source": [
    "# شماره 7 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "1fe92461",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  شماره 7\n",
    "# روش پیشنهادی من استفاده از میانگین یا میانه است و میتوان به این صورت دیتای از دست رفته را جایگزین کرد\n",
    "data = dataset\n",
    "data[\"width\"] = data[\"width\"].replace(np.NaN, data[\"width\"].median())\n",
    "#print(data[\"width\"][:59])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa06e510",
   "metadata": {},
   "source": [
    "### در راه حل پیشنهادی بالا ، مقدار نال یا خالی یا گم شده را با یک مقدار دیگر جایگزین کرده ایم\n",
    "\n",
    "حال مقدار جدید را با استفاده از میانگین گرفتن از مقادیر این فیچر یا ستون خاص، محاسبه میکنیم یا میتوان از شاخصه های آماری دیگری مثل میانه برای همین فیچر یا ستون هم استفاده کرد"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6243fad5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# روش بعدی استفاده از ماشین لرنینگ است\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "test_data = data[data[\"width\"].isnull()]\n",
    "data.dropna(inplace=True)\n",
    "\n",
    "y_train = data[\"width\"]\n",
    "X_train = data.drop(\"width\", axis=1)\n",
    "X_test = test_data.drop(\"width\", axis=1)\n",
    "\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "y_pred = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ea8dfc9",
   "metadata": {},
   "source": [
    "Here 'width' column contains missing values so for prediction of null values the spliting of data will be,\n",
    "\n",
    "y_train: rows from data[\"width\"] with non null values\n",
    "\n",
    "y_test: rows from data[\"width\"] with null values\n",
    "\n",
    "X_train: Dataset except data[\"width\"] features with non null values\n",
    "\n",
    "X_test: Dataset except data[\"width\"] features with null values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12fa6d82",
   "metadata": {},
   "source": [
    "### از ماشین لرنینگ استفاده میکنیم و فرآیند های تمرین و تست را طی میکنیم همانطور که در چند خط بالایی توضیح داده شده است\n",
    "\n",
    "از رگرسیون خطی استفاده شده است و در نهایت یک مدل جدید پیش بینی میشود"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a660bf92",
   "metadata": {},
   "source": [
    "علی عسگری 40032223"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
